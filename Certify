This function provides a digital certificate of the proof of existance of a Vaulted Object within a specific space-time context.
  [TestMethod]
  public void TestMethod_certify_object()
  {
      string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
      string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
      string sToken = System.IO.File.ReadAllText(userTokenPath);
      RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);

      string objectId = "b1c88ed4-ac0e-4f27-8549-c5fc9318bcd9"; // Fill with Vaulted Object Identifier from addObject response.
      objectId = <objctId>

      // Extract Function endpoint from User Token
      var securityToken = new JwtSecurityToken(r.jwToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("http://localhost:54718/");
      // Obtain JwToken
      HttpClient _httpClient = new HttpClient();
      // Build funtion endpoint Uri
      string _relativeUrl = "Object/Certify?objectId=" + objectId;
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;

      // Add VaultMe Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", r.jwToken);

      // Get Vaulted Object Identifier response
      HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
      if (response.IsSuccessStatusCode)
      {
          // Download proof of existance certificate
          string certificate = response.Content.ReadAsStringAsync().Result;
          string spath = @"D:\Examples\VO\Certificate-" + SecureIdentity + ".json";
          System.IO.File.WriteAllText(spath, certificate);
      }
      else
      {
          // fail
          string error = response.Content.ReadAsStringAsync().Result;
          throw new Exception(error);
      }

  }
