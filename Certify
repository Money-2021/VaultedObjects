This function provides a digital certificate of the proof of existance of a Vaulted Object within a specific space-time context.
[TestMethod]
 public void TestMethod_certify_object()
 {
     string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
     string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
     string sToken = System.IO.File.ReadAllText(userTokenPath);
     RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);

     Guid id = new Guid(""); // Fill with Vaulted Object Identifier

     // Extract Function endpoint from User Token
     var securityToken = new JwtSecurityToken(r.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
     //_baseUri = new Uri("http://localhost:54718/");

     // Obtain Function JwToken
     HttpClient _httpClient = new HttpClient();
     // Build funtion endpoint Uri
     string _relativeUrl = "api/Cirtify?id=" + id;
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;

     // Add VaultMe Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);

     // Get Vaulted Object Identifier response
     HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         // Download proof of existance certificate
         string certificate = response.Content.ReadAsStringAsync().Result;
         string spath = @"D:\Examples\VO\Certificate-" + SecureIdentity+ ".json";
         System.IO.File.WriteAllText(spath, certificate);
     }
     else
     {
         // fail
         string error = response.Content.ReadAsStringAsync().Result;
         throw new Exception(error);
     }

 }

// 2. Validate Response
[TestMethod]
public void Admin_certificate_proof()
{
      string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
      string spath = @"D:\Examples\VO\Certificate-" + SecureIdentity + ".json";
      string json = System.IO.File.ReadAllText(spath);

      string s =  System.Text.Json.JsonDocument.Parse(json).RootElement.GetProperty("objectImprint").ToString();
      byte[] ObjectImprint = HexEncoder.Decode(s);
      s = System.Text.Json.JsonDocument.Parse(json).RootElement.GetProperty("merkleRoot").ToString();
      byte[] MerkleRoot = HexEncoder.Decode(s);
      string proof = System.Text.Json.JsonDocument.Parse(json).RootElement.GetProperty("merkleProof").ToString();

      bool bResult = ValidateProof(ObjectImprint, MerkleRoot, proof);

}
public static bool ValidateProof(byte[] objectImprint,byte[] merkleRoot, string merkleProof )
{
    // Deserialise proof
    Dictionary<string, string>[] values = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>[]>(merkleProof);
    // Load Proof for this Coin
    MerkleTools.Proof e = new MerkleTools.Proof(objectImprint, merkleRoot, SHA256.Create());
    foreach (Dictionary<string, string> value in values)
    {
        if (value.ContainsKey("right"))
            e.AddRight(Hex.HexToBytes(value.Values.First()));
        else
            e.AddLeft(Hex.HexToBytes(value.Values.First()));
    }
    // Validate Coin Hash value exists in Supply via the Coin Merkle Proof
    bool bResult = e.Validate();
    return bResult;
}
