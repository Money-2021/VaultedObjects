This function provides a digital certificate of the proof of existance of a Vaulted Object within a specific space-time context.
[TestMethod]
 public void TestMethod_certify_object()
 {
     string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
     string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
     string sToken = System.IO.File.ReadAllText(userTokenPath);
     RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);

     Guid id = new Guid(""); // Fill with Vaulted Object Identifier

     // Extract Function endpoint from User Token
     var securityToken = new JwtSecurityToken(r.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
     //_baseUri = new Uri("http://localhost:54718/");

     // Obtain Function JwToken
     HttpClient _httpClient = new HttpClient();
     // Build funtion endpoint Uri
     string _relativeUrl = "api/Cirtify?id=" + id;
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;

     // Add VaultMe Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);

     // Get Vaulted Object Identifier response
     HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         // Download proof of existance certificate
         string certificate = response.Content.ReadAsStringAsync().Result;
         string spath = @"D:\Examples\VO\Certificate-" + SecureIdentity+ ".json";
         System.IO.File.WriteAllText(spath, certificate);
     }
     else
     {
         // fail
         string error = response.Content.ReadAsStringAsync().Result;
         throw new Exception(error);
     }

 }
