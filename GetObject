[TestMethod]
public void TestMethod_get_object()
{
    string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
    string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
    string sToken = System.IO.File.ReadAllText(userTokenPath);
    RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);

    Guid id = new Guid("5f9d2937-5afe-4465-bd47-4a5cb8dfb4d7"); // Fill with Vaulted Object Identifier

    // Extract Function endpoint from User Token
    var securityToken = new JwtSecurityToken(r.userToken);
    Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
  
    HttpClient _httpClient = new HttpClient();
    // Build funtion endpoint Uri
    string _relativeUrl = "api/GetObject?id=" +id;
    Uri _uri = new Uri(_baseUri, _relativeUrl);
    _httpClient.BaseAddress = _baseUri;

    // Add User or Device Jwtoken
    _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
 
    // Calc Hash
    string shash = id.ToString() + SecureIdentity;
    byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(shash));
    // Authenticate user has HOTP share
    var twoFactorAuthenticator = new Google.Authenticator.TwoFactorAuthenticator();
    long counter = BytesToLong(hashBytes);
    string otpPin = twoFactorAuthenticator.GeneratePINAtInterval(r.setupcode, counter);
    _httpClient.DefaultRequestHeaders.Add("x-otp", otpPin);

    // Get Vaulted Object download URL
    HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
    if (response.IsSuccessStatusCode)
    {
        // Download via SAS Uri
        string uri  = response.Content.ReadAsStringAsync().Result;

    }
    else
    {
        // fail
        string error = response.Content.ReadAsStringAsync().Result;
        throw new Exception(error);
    }

}
