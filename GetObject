[TestMethod]
public void TestMethod_get_object()
{
    string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
    string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
    UserToken.RecoveryResponse r =  UserToken.GetUserToken(userTokenPath);

    Guid id; //= new Guid(""); // Fill with Vaulted Object Identifier
    string objectId  = ObjectStoreDB.List(SecureIdentity).FirstOrDefault().ObjectId;
    id = new Guid(objectId);


    // Extract Function endpoint from User Token
    var securityToken = new JwtSecurityToken(r.jwToken);
    Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
    //_baseUri = new Uri("http://localhost:54718/");

    // Build funtion endpoint Uri
    HttpClient _httpClient = new HttpClient();
    string _relativeUrl = "Object/Get?id=" + id;
    Uri _uri = new Uri(_baseUri, _relativeUrl);
    _httpClient.BaseAddress = _baseUri;

    // Add User Jwtoken
    _httpClient.DefaultRequestHeaders.Add("x-token", r.jwToken);

    // Calc Auth Hash
    string shash = id.ToString() + SecureIdentity;
    byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(shash));
    string ssign = HmacProvider.SignHash(r.share, hashBytes);
    _httpClient.DefaultRequestHeaders.Add("x-jws-signature", ssign);

    // Get Vaulted Object download URL
    HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
    if (response.IsSuccessStatusCode)
    {
        // Async download via SAS Uri
        string uri = response.Content.ReadAsStringAsync().Result;
        byte[]? objContent = UserToken.GetUrlContent(uri).Result;
        if (objContent != null)
        {
            // Decrypt
            byte[] data = AesProvider.Decrypt(r.share, objContent);
        }
        else
        {
            throw new Exception("Conent download error");
        }

    }
    else
    {
        // fail
        string error = response.Content.ReadAsStringAsync().Result;
        throw new Exception(error);
    }

}

///
/// This funtion retieves the ITS encrypted AESGCM encryptied object for local storage  purposes.

   [TestMethod]
  public void TestMethod_get_object_jwt()
  {
      string SecureIdentity = Environment.GetEnvironmentVariable("TestA");
      string userTokenPath = @"D:\Examples\VO\Token-" + SecureIdentity + ".jwt";
      UserToken.RecoveryResponse r = UserToken.GetUserToken(userTokenPath);

      Guid id; //= new Guid(""); // Fill with Vaulted Object Identifier
      string objectId = ObjectStoreDB.List(SecureIdentity).FirstOrDefault().ObjectId;
      id = new Guid(objectId);


      // Extract Function endpoint from User Token
      var securityToken = new JwtSecurityToken(r.jwToken);
      Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
      //_baseUri = new Uri("http://localhost:54718/");

      // Build funtion endpoint Uri
      HttpClient _httpClient = new HttpClient();
      string _relativeUrl = "Object/Get?id=" + id;
      Uri _uri = new Uri(_baseUri, _relativeUrl);
      _httpClient.BaseAddress = _baseUri;
      // Force jwt response
      _httpClient.DefaultRequestHeaders.Add("x-type", "jwt");
      // Add User Jwtoken
      _httpClient.DefaultRequestHeaders.Add("x-token", r.jwToken);
      // Calc Auth Hash
      string shash = id.ToString() + SecureIdentity;
      byte[] hashBytes = SHA256.Create().ComputeHash(Encoding.UTF8.GetBytes(shash));
      string ssign = HmacProvider.SignHash(r.share, hashBytes);
      _httpClient.DefaultRequestHeaders.Add("x-jws-signature", ssign);
      // Get Vaulted Object download URL
      HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
      if (response.IsSuccessStatusCode)
      {
          // Astnc download via SAS Uri
          string uri = response.Content.ReadAsStringAsync().Result;
          byte[]? objContent = UserToken.GetUrlContent(uri).Result;
          userTokenPath = @"D:\Examples\VO\Object-" + objectId + ".jwt";
          System.IO.File.WriteAllBytes(userTokenPath, objContent);

          Debug.WriteLine(uri);
      }
      else
      {
          // fail
          string error = response.Content.ReadAsStringAsync().Result;
          throw new Exception(error);
      }

  }
