This demonstrates a common Valuting orld flow, for any user applciations

[TestMethod]
public void TestMethod_execute()
{
    string sin = Environment.GetEnvironmentVariable("TestA");
    string userTokenPath = @"D:\Examples\VO\Token-" + sin + ".jwt";

    //Establish vaulting session
    string vaultMeToken = vault_me(userTokenPath);
    // Object to Vault
    byte[] data = Encoding.UTF8.GetBytes("This is test content");
    // Vault  Object
    Guid id = add_object(vaultMeToken, "test.txt", data);
    Debug.WriteLine("Created Vaulted ObjectId = " + id.ToString());

    // Certify Vaulted Object 
    string certificate = certify_object(userTokenPath, id);
    if (certificate == string.Empty)
    {
        // Ticks require a minimium of two records.
        Debug.WriteLine("No Tick available, try again latter.");
    }
    else
    {
        // Save Certificate and Valuted Object Id
        string spath = @"D:\Examples\VO\Certificate-" + id.ToString() + ".json";
        System.IO.File.WriteAllText(spath, certificate);
        Debug.WriteLine("Certificate saved.");
    }
    Debug.WriteLine("Execute completed.");
}


    private string vault_me(string userTokenPath)
    {
        RecoveryResponse r = UserToken.GetUserToken(userTokenPath);
        string userToken = r.userToken;

        // Extract endpoint from User Token
        var securityToken = new JwtSecurityToken(r.userToken);
        Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
        //_baseUri = new Uri("http://localhost:54718/");

        // Obtain Function JwToken
        HttpClient _httpClient = new HttpClient();
        // Build funtion endpoint Uri
        string _relativeUrl = "User/VaultMe";
        Uri _uri = new Uri(_baseUri, _relativeUrl);
        _httpClient.BaseAddress = _baseUri;

        // Add User Jwtoken
        _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);

        // Get response
        HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
        if (response.IsSuccessStatusCode)
        {
           
            Stream receiveStream = response.Content.ReadAsStream();
            StreamReader reader = new StreamReader(receiveStream, Encoding.UTF8);
            string jwToken = reader.ReadToEnd();
            return jwToken;
        }
        else
        {
            // fail
            string error = response.Content.ReadAsStringAsync().Result;
            if (string.IsNullOrEmpty(error))
            {
                error = response.ReasonPhrase;
            }
            throw new Exception(error);
        }

    }
    private Guid add_object(string vaultMeToken, string filename , byte[] data)
    {
        // Extract endpoint from Token
        var securityToken = new JwtSecurityToken(vaultMeToken);
        Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());

        HttpClient _httpClient = new HttpClient();
        // Build funtion endpoint Uri
        string _relativeUrl = "Object/Add?filename=" + filename;
        Uri _uri = new Uri(_baseUri, _relativeUrl);
        _httpClient.BaseAddress = _baseUri;
        // Add VaultMe Jwtoken
        _httpClient.DefaultRequestHeaders.Add("x-token", vaultMeToken);
        // Add Vaulted object content in byte[] 
        ByteArrayContent content = new ByteArrayContent(data);
        // Get Vaulted Object Identifier response
        HttpResponseMessage response = _httpClient.PostAsync(_uri, content).Result;
        if (response.IsSuccessStatusCode)
        {
            // GUID
            string onjectId = response.Content.ReadAsStringAsync().Result;
            return new Guid(onjectId);
        }
        else
        {
            // fail
            string error = response.Content.ReadAsStringAsync().Result;
            if (string.IsNullOrEmpty(error))
            {
                error = response.ReasonPhrase;
            }
            throw new Exception(error);
        }
    }
    private string certify_object(string userTokenPath, Guid id)
    {
        string sToken = System.IO.File.ReadAllText(userTokenPath);
        RecoveryResponse r = System.Text.Json.JsonSerializer.Deserialize<RecoveryResponse>(sToken);
    
        // Extract endpoint from User Token
        var securityToken = new JwtSecurityToken(r.userToken);
        Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
        //_baseUri = new Uri("http://localhost:54718/");
        // Obtain JwToken
        HttpClient _httpClient = new HttpClient();
        // Build funtion endpoint Uri
        string _relativeUrl = "Object/Certify?objectId=" + id;
        Uri _uri = new Uri(_baseUri, _relativeUrl);
        _httpClient.BaseAddress = _baseUri;
        // Add VaultMe Jwtoken
        _httpClient.DefaultRequestHeaders.Add("x-token", r.userToken);
        // Get Vaulted Object Identifier response
        HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
        if (response.IsSuccessStatusCode)
        {
            // Download proof of existance certificate
            string certificate = response.Content.ReadAsStringAsync().Result;
            return certificate;
        }
        else
        {
            // fail
            string error = response.Content.ReadAsStringAsync().Result;
            return string.Empty;
            
        }

    }
