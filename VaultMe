1. Issue VaultMe Token
Security Policy
a) A call must be made to VaultMe each and every vaulting session 
b) If required a call may be made for each AddObject, depending on the risk user assesment.

[TestMethod]
 public void UseCase_IssueVaultMeToken()
 {
    
     string folder = Environment.GetEnvironmentVariable("Envionment");
     string SecureIdentity = Environment.GetEnvironmentVariable("SinA");
     string userTokenPath = @"D:\Examples\" + node + @"\" + folder + "\\Token-" + SecureIdentity + ".jwt";
     RecoveryResponse rsp = GetUserToken(userTokenPath);

     // Extract Function endpoint from User Token
     var securityToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityToken(rsp.userToken);
     Uri _baseUri = new Uri(securityToken.Audiences.FirstOrDefault());
     //_baseUri = new Uri("http://localhost:54718/");

     // Obtain Function JwToken
     HttpClient _httpClient = new HttpClient();
     // Build funtion endpoint Uri
     string _relativeUrl = "api/VaultMe";
     Uri _uri = new Uri(_baseUri, _relativeUrl);
     _httpClient.BaseAddress = _baseUri;
     // Add User Jwtoken
     _httpClient.DefaultRequestHeaders.Add("x-token", rsp.userToken);

     // Get response
     HttpResponseMessage response = _httpClient.GetAsync(_uri).Result;
     if (response.IsSuccessStatusCode)
     {
         string jwToken = response.Content.ReadAsStringAsync().Result;
         string sPath = @"D:\Examples\" + node + @"\VO\VaultMe-" + SecureIdentity + ".jwt";
         System.IO.File.WriteAllText(sPath, jwToken);
     }
     else
     {
         // fail
         string error = response.Content.ReadAsStringAsync().Result;
         throw new Exception(error);
     }
 }
